package views.actividad1;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JTable;

public class ConsultaOperaciones extends JFrame {

	private JTable tblPeliculas;
	private JComboBox cbxDirectores;
	private JComboBox cbxGeneros;
	private PeliculasService peliservice = new PeliculasService();
	
	private DirectorService directorservice = new DirectorService();

	public Reporte() {
		setBounds(100, 100, 635, 475);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		getContentPane().setLayout(null);
		
		JPanel jpanel = new JPanel();
		jpanel.setBounds(28, 11, 558, 60);
		getContentPane().add(jpanel);
		jpanel.setLayout(null);
		
		
		
		cbxGeneros = new JComboBox();
		
		
		cbxGeneros.setBounds(66, 5, 114, 20);
		jpanel.add(cbxGeneros);
		
		cbxDirectores = new JComboBox();
		
		cbxDirectores.setBounds(246, 5, 221, 20);
		jpanel.add(cbxDirectores);
		
		JLabel lblGenero = new JLabel("Genero");
		lblGenero.setBounds(10, 8, 46, 14);
		jpanel.add(lblGenero);
		
		JLabel lblDirector = new JLabel("Director");
		lblDirector.setBounds(190, 8, 46, 14);
		jpanel.add(lblDirector);
		
		JButton btnBuscar = new JButton("Buscar");
		btnBuscar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					Object objGeneroSelected = cbxGeneros.getSelectedItem();
					String strGeneroSelected = null;
					if (objGeneroSelected !=null){
						 strGeneroSelected = objGeneroSelected.toString();
					}
					Integer directorSeleccionado = obtenerIdDirectorSeleccionado();
					tblPeliculas.setModel(filtrarPelis(strGeneroSelected,directorSeleccionado));
				} catch (SQLException j) {
				
					j.printStackTrace();
				}
				
				
			}
		});
		btnBuscar.setBounds(484, 4, 64, 23);
		jpanel.add(btnBuscar);
		
	
		
		String data[][] = { { "Row1/1", "Row1/2", "Row1/3" },
	            { "Row2/1", "Row2/2", "Row2/3" },
	            { "Row3/1", "Row3/2", "Row3/3" },
	            { "Row4/1", "Row4/2", "Row4/3" }, };

	    String header[] = { "Column 1", "Column 2", "Column 3" };
		
		
			tblPeliculas = new JTable(data,header);
		
			try {
				tblPeliculas.setModel(filtrarPelis(null,0));
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			
			tblPeliculas.setFillsViewportHeight(true);
			tblPeliculas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			tblPeliculas.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
			tblPeliculas.setBounds(50, 180, 490, 216);
			JScrollPane jscrollPane = new JScrollPane(tblPeliculas);
			jscrollPane.setBounds(28, 82, 558, 275);
			getContentPane().add(jscrollPane);
			
			//jscrollPane.setRowHeaderView(tblPeliculas);
		
		JButton btnCerrar = new JButton("Cerrar");
		btnCerrar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				dispose();
			}
		});
		btnCerrar.setBounds(497, 402, 89, 23);
		getContentPane().add(btnCerrar);
		
		try {
			loadDirectores();
			loadGeneros();
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		

	}
	
	
	private DefaultTableModel filtrarPelis(String genero, Integer idDirector) throws SQLException{
		ResultSet rs;
        rs = peliservice.consultarPeliculas_genero_director(genero, idDirector);
        DefaultTableModel dm = buildTableModel(rs);
        rs.close();
        
		return dm;
		
	}
	
	
	
	private DefaultTableModel buildTableModel(ResultSet rs) throws SQLException
	     {
	    ResultSetMetaData metaData = rs.getMetaData();

	    // nombres de columnas
	    Vector<String> columnNames = new Vector<String>();
	    int columnCount = metaData.getColumnCount();
	    for (int column = 1; column <= columnCount; column++) {
	        columnNames.add(metaData.getColumnName(column));
	    }

	    // data de la tabla
	    Vector<Vector<Object>> data = new Vector<Vector<Object>>();
	    while (rs.next()) {
	        Vector<Object> vector = new Vector<Object>();
	        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
	            vector.add(rs.getObject(columnIndex));
	        }
	        data.add(vector);
	    }

	    return new DefaultTableModel(data, columnNames);

	}
	
	private void loadDirectores() throws SQLException{
		List<Director> directores = directorservice.consultarDirectores();
		this.cbxDirectores.removeAll();
		String itemInicial = "Todos" + "#" + "0";
		this.cbxDirectores.addItem(itemInicial);
		
		for (Director director : directores) {
			String itemcombo = director.getNombre() + " " + director.getApellidos() + "#" + director.getIdDirector();
			this.cbxDirectores.addItem(itemcombo);
		}
		
		this.cbxDirectores.setSelectedIndex(0);
	}
	
	private void loadGeneros() throws SQLException{
		List<String> generos = peliservice.consultarGeneros();
		this.cbxGeneros.removeAll();
		this.cbxGeneros.addItem("Todos");
		for (String genero : generos) {
			this.cbxGeneros.addItem(genero);
		}
		this.cbxGeneros.setSelectedIndex(0);
		
		
	}
	private Integer obtenerIdDirectorSeleccionado(){
		
		String item = (String) this.cbxDirectores.getSelectedItem();
		String[] items = item.split("#");
		return Integer.parseInt(items[1]);

	}
	
	
	
	

}
