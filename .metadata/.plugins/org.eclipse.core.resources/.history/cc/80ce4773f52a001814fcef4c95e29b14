package com.orm.service;

import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.mysql.jdbc.Statement;
import com.orm.entity.CuentaBancaria;
import com.orm.entity.Operacion;

public class OperacionesService {

	Connection conn = null;

	public OperacionesService(Connection conn) {
		super();
		this.conn = conn;
	}

	public void insertarOperacion(Operacion operacion) {

		
	}

	public void modificarOperaciones(Operacion operaciones) throws SQLException {
		
	}

	public ResultSet listarOperacionesRojo(String nroCuenta) throws SQLException {
		String query = "SELECT o.* FROM operaciones o, cuentasbancarias c where o.saldoactualizado <0 and o.id_cuentabancaria = c.id and c.numcuenta =" + nroCuenta;
		
		ResultSet rs = null;
		return rs;
	}
	
	public ResultSet listarCuentasEnRojo() throws SQLException {
		String query = "SELECT c.* ,o.saldoactualizado FROM operaciones o , cuentasbancarias c  where o.id_cuentabancaria = c.id " + 
				"and o.saldoactualizado <0";
		Statement st = (Statement) conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		return rs;
	}

	public ResultSet listarOperaciones(String nroCuenta) throws SQLException {
		String query = "SELECT o.* FROM operaciones o, cuentasbancarias c where o.id_cuentabancaria = c.id and c.numcuenta =" + nroCuenta;
		Statement st = (Statement) conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		return rs;
	}

	public void eliminarOperaciones(Operacion operaciones) throws SQLException {
		String query = "delete from operaciones where num_cuenta=? " + operaciones.getCuentasbancaria().getNumcuenta();
		Statement st = (Statement) conn.createStatement();
		st.close();
		conn.close();

	}

	@SuppressWarnings("unused")
	// Consulta de operaciones por id
	private Operacion consultarOperacionByIdOperacion(Operacion operaciones) throws SQLException {

		String query = "select *from operaciones where id=?" + operaciones.getId();
		
		Operacion op = null;
		return op;
	}

	private Operacion consultarOperacionByIdCuenta(Operacion operaciones) throws SQLException {

		String query = "select *from operaciones where id_cuentabancaria=?" + operaciones.getCuentasbancaria().getId();
		
		Operacion op = null;
		return op;
	}

	// Consulta de todas las operaciones:

	private List<Operacion> consultarListaoperaciones() throws SQLException {

		String query = "select * from operaciones ";
		

		List<Operacion> operaciones = null;
		return operaciones;

	}

	private Operacion recupearOperacionPrevia(int idCuenta) throws SQLException {
		String query = "SELECT * FROM operaciones where id_cuentabancaria =" + idCuenta + " and "
				+ "fechahora = (SELECT MAX(fechahora) FROM operaciones where id_cuentabancaria = " + idCuenta + ")";
		
		Operacion op = null;
		return op;
	}

	private CuentaBancaria recuperarCuenta(int idCuenta) throws SQLException {
		CuentaBancariaService ctaservice = new CuentaBancariaService(conn);
		CuentaBancaria ctabancaria = ctaservice.consultarCuenta(idCuenta);
		return ctabancaria;
	}

	private Double obtenerSaldoActualizado(Operacion opPrevia, int cuenta, String tipo, Double cantidad)
			throws SQLException {
		Double saldoActual = 0.0;
		if (opPrevia.getId() != 0) {
			Double saldoPrevio = opPrevia.getSaldoactualizado();
			saldoActual = saldoPrevio + cantidad;

		} else {
			CuentaBancaria cta = recuperarCuenta(cuenta);
			Double saldoInicial = cta.getSaldo();
			saldoActual = saldoInicial + cantidad;

		}
		return saldoActual;

	}
}
