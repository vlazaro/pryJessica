package actividad1.servicios;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.mysql.jdbc.Statement;

import actividad1.domain.Operacion;

public class OperacionesService {

	
	Connection conn=null;
	
	public OperacionesService(Connection conn) {
		super();
		this.conn = conn;
	}
	
	public void insertarOperacion(Operacion operaciones)  {
		
		try {
			
		String query ="INSERT INTO operaciones  VALUES(?,?,?,?)";
		PreparedStatement pst= conn.prepareStatement(query);
		pst.setDate(1, (Date) operaciones.getFecha_hora());
		
		if(operaciones.getCantidad()>=0) {
			pst.setString(2,"I");
		}
		 else {
			 pst.setString(2, "E");
		}
		pst.setDouble(3, operaciones.getCantidad());
		
		
		pst.setDouble(4,  operaciones.getSaldoActualizado());
		
		
		pst.setInt(4, operaciones.getId_cuenta());
		
		
		
		
		pst.executeUpdate();
		pst.close();
	}
	catch(SQLException e) {
		System.out.println("Error: al ingresar una nueva operación");
		e.printStackTrace();
		
	}
	}
	
	public void modificarOperaciones(Operacion operaciones) throws SQLException {
		String query= "UPDATE operaciones set tipo=?, cantidad=?, where id_cuenta=?";
		PreparedStatement pst =conn.prepareStatement(query);
		pst.setString(1, operaciones.getTipo());
		pst.setDouble(2, operaciones.getCantidad());
		pst.setInt(3, operaciones.getId_cuenta());
		pst.executeUpdate();
		pst.close();
		conn.close();
		
		
	}
	
	public void eliminarOperaciones(Operacion operaciones) throws SQLException {
		String query="delete from operaciones where num_cuenta=? "+ operaciones.getId_cuenta();
		Statement st=(Statement) conn.createStatement();
		st.close();
		conn.close();
		
	}
	
	
	@SuppressWarnings("unused")
	// Consulta de operaciones por id
	private Operacion consultarOperacion(Operacion operaciones) throws SQLException {
		
		String query="select *from operaciones where id=?"+ operaciones.getId();
		Statement st = (Statement) conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		
		Operacion op= new Operacion();
		
		while(rs.next()) {
			
			op.setFecha_hora(rs.getDate("fechahora"));
			op.setTipo(rs.getString("tipo"));
			op.setCantidad(rs.getDouble("cantidad"));
			op.setId_cuenta(rs.getInt("id_cuentabancaria"));
						
		}
		return op;
		
	}// Consulta de todas las operaciones:
	
	private List<Operacion> consultarListaoperaciones() throws SQLException{
		
		String query="select *from operaciones ";
		Statement st = (Statement) conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		
		List<Operacion> operaciones = new ArrayList<Operacion>();
		
		while(rs.next()) {
			Operacion op= new Operacion();
			op.setFecha_hora(rs.getDate("fechahora"));
			op.setTipo(rs.getString("tipo"));
			op.setCantidad(rs.getDouble("cantidad"));
			op.setId_cuenta(rs.getInt("id_cuentabancaria"));
			operaciones.add(op);
			
		}
			
		return operaciones;
		
		
	}
	
	
	
	private Operacion recupearOperaionPrevia(int idCuenta) throws SQLException {
		String query="SELECT * FROM operaciones where id_cuentabancaria ="  + idCuenta + " and " + 
					  "fechahora = (SELECT MAX(fechahora) FROM operaciones where id_cuentabancaria = " + idCuenta + ")";
		Statement st = (Statement) conn.createStatement();
		ResultSet rs = st.executeQuery(query);
		Operacion op= new Operacion();
		while(rs.next()) {
			
			op.setFecha_hora(rs.getDate("fechahora"));
			op.setTipo(rs.getString("tipo"));
			op.setCantidad(rs.getDouble("cantidad"));
			op.setId_cuenta(rs.getInt("id_cuentabancaria"));
						
		}
		return op;
	}
	
	
	
	
	
}
